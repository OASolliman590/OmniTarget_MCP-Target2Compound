"""
Report generation for pipeline runs (static HTML + plots).

Keeps dependencies minimal: matplotlib/seaborn for plots; pure HTML assembly.
"""

from __future__ import annotations

import base64
from dataclasses import dataclass
from io import BytesIO
from pathlib import Path
from typing import Dict, Optional

import pandas as pd

from ..utils.data_processing import collect_run_data, validate_results, summarize_results
from ..utils.export import save_figure
from .networks import build_compound_target_graph, draw_bipartite
from .molecular import smiles_grid
from .plots import plot_score_distribution, plot_top_compounds, plot_similarity_vs_score


@dataclass
class ReportConfig:
    out_dir: Path
    title: str = "Pipeline Report"
    include_molecular: bool = False


def _fig_to_data_uri(fig) -> str:
    buf = BytesIO()
    fig.savefig(buf, format="png", dpi=150, bbox_inches="tight")
    buf.seek(0)
    b64 = base64.b64encode(buf.read()).decode("ascii")
    return f"data:image/png;base64,{b64}"


def generate_report(results_csv: Path, manifest_path: Optional[Path], report_dir: Path, title: str = "Pipeline Report") -> Dict[str, Path]:
    report_dir.mkdir(parents=True, exist_ok=True)
    run = collect_run_data(results_csv, manifest_path)
    df = run.results
    errors = validate_results(df)
    summary = summarize_results(df)

    # Generate plots
    figs = {
        "score_dist": plot_score_distribution(df),
        "top_compounds": plot_top_compounds(df),
        "sim_vs_score": plot_similarity_vs_score(df),
    }
    images = {name: _fig_to_data_uri(fig) for name, fig in figs.items()}

    # Network plot
    try:
        G = build_compound_target_graph(df)
        net_fig = draw_bipartite(G)
        figs["network"] = net_fig
        images["network"] = _fig_to_data_uri(net_fig)
    except Exception:
        pass

    # Compound structure grid from ligands.smi (auto-detect)
    molgrid_img_data = ""
    ligands_file = results_csv.parent / "ligands.smi"
    if ligands_file.exists():
        try:
            smiles = []
            legends = []
            with open(ligands_file) as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith("#"):
                        continue
                    parts = line.split()
                    smiles.append(parts[0])
                    legends.append(parts[1] if len(parts) > 1 else "")
                    if len(smiles) >= 25:
                        break
            if smiles:
                img = smiles_grid(smiles, legends=legends, n_cols=5)
                # Convert PIL image to data URI
                from io import BytesIO
                buf = BytesIO()
                img.save(buf, format="PNG")
                buf.seek(0)
                b64 = base64.b64encode(buf.read()).decode("ascii")
                molgrid_img_data = f"data:image/png;base64,{b64}"
        except Exception:
            molgrid_img_data = ""

    # Simple HTML
    html = f"""
<!DOCTYPE html>
<html lang=\"en\">
<head>
  <meta charset=\"utf-8\" />
  <title>{title}</title>
  <style>
    body {{ font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial; margin: 24px; }}
    .section {{ margin-bottom: 32px; }}
    h1 {{ margin-bottom: 8px; }}
    .grid {{ display: grid; grid-template-columns: 1fr; gap: 16px; }}
    img {{ max-width: 100%; height: auto; border: 1px solid #ddd; }}
    table {{ border-collapse: collapse; }}
    th, td {{ padding: 4px 8px; border: 1px solid #ccc; }}
  </style>
  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />
  <meta name=\"description\" content=\"Automated pipeline report\" />
  <meta name=\"robots\" content=\"noindex\" />
  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />
  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />
  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap\" rel=\"stylesheet\" />
  <style> body {{ font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; }} </style>
  <noscript>This report contains static content generated by the pipeline.</noscript>
  <!-- Report generated by orchestrator.visualization.reports -->
</head>
<body>
  <h1>{title}</h1>
  <div class=\"section\">
    <h2>Summary</h2>
    <table>
      <tbody>
        {''.join(f'<tr><td>{k}</td><td>{v}</td></tr>' for k, v in summary.items())}
      </tbody>
    </table>
    {('<p style=\"color:#c00\">Validation issues: ' + ', '.join(errors) + '</p>') if errors else ''}
  </div>
  <div class=\"section grid\">
    <div>
      <h3>Fused Score Distribution</h3>
      <img src=\"{images['score_dist']}\" alt=\"Fused Score Distribution\" />
    </div>
    <div>
      <h3>Top Compounds</h3>
      <img src=\"{images['top_compounds']}\" alt=\"Top Compounds\" />
    </div>
    <div>
      <h3>Similarity vs Fused Score</h3>
      <img src=\"{images['sim_vs_score']}\" alt=\"Similarity vs Score\" />
    </div>
    {('<div><h3>Compoundâ€“Target Network</h3><img src=\'' + images.get('network','') + '\' alt=\'Network\' /></div>') if images.get('network') else ''}
    {('<div><h3>Compound Structures (from ligands.smi)</h3><img src=\'' + molgrid_img_data + '\' alt=\'Molecule Grid\' /></div>') if molgrid_img_data else ''}
  </div>
  <div class=\"section\">
    <p>Results CSV: {results_csv}</p>
    {f'<p>Manifest: {manifest_path}</p>' if manifest_path else ''}
  </div>
</body>
</html>
"""

    html_path = report_dir / "index.html"
    html_path.write_text(html)
    # Also save static PNGs next to report
    saved = {}
    for name, fig in figs.items():
        saved.update({f"{name}_{k}": v for k, v in save_figure(fig, report_dir / name).items()})

    return {"html": html_path, **saved}


def generate_comparative_report(results_csv_a: Path, manifest_a: Optional[Path], results_csv_b: Path, manifest_b: Optional[Path], out_dir: Path, title: str = "Comparative Report") -> Dict[str, Path]:
    """Generate a side-by-side comparative report for two runs."""
    out_dir.mkdir(parents=True, exist_ok=True)
    run_a = collect_run_data(results_csv_a, manifest_a)
    run_b = collect_run_data(results_csv_b, manifest_b)

    df_a = run_a.results.copy()
    df_b = run_b.results.copy()
    sum_a = summarize_results(df_a)
    sum_b = summarize_results(df_b)

    # Overlay histogram
    import matplotlib.pyplot as plt
    import seaborn as sns
    figs = {}
    fig, ax = plt.subplots(figsize=(8, 5))
    if "fused_score" in df_a.columns and "fused_score" in df_b.columns:
        sns.histplot(df_a["fused_score"], color="#4e79a7", alpha=0.5, label="Run A", ax=ax)
        sns.histplot(df_b["fused_score"], color="#f28e2b", alpha=0.5, label="Run B", ax=ax)
        ax.legend()
        ax.set_title("Fused Score Distributions")
    figs["compare_hist"] = fig
    images = {name: _fig_to_data_uri(fig) for name, fig in figs.items()}

    def _table(d: dict) -> str:
        return ''.join(f'<tr><td>{k}</td><td>{v}</td></tr>' for k, v in d.items())

    html = f"""
<!DOCTYPE html>
<html lang=\"en\"><head><meta charset=\"utf-8\" /><title>{title}</title>
<style>body{{font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;margin:24px}}</style>
</head><body>
  <h1>{title}</h1>
  <div style=\"display:grid;grid-template-columns:1fr 1fr;gap:16px\">
    <div><h3>Run A Summary</h3><table><tbody>{_table(sum_a)}</tbody></table></div>
    <div><h3>Run B Summary</h3><table><tbody>{_table(sum_b)}</tbody></table></div>
  </div>
  <div style=\"margin-top:16px\"><h3>Fused Score Distributions</h3><img src=\"{images['compare_hist']}\" /></div>
</body></html>
"""
    html_path = out_dir / "compare.html"
    html_path.write_text(html)
    saved = {f"{k}_{f}": p for k, v in figs.items() for f, p in save_figure(v, out_dir / k).items()}
    saved["html"] = html_path
    return saved
